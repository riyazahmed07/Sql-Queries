//Creating New Database

create database StudentDb

//Creating Student Table

CREATE TABLE [dbo].[StudentInfo](
	[StudentId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[Age] [int] NOT NULL,
	[Address] [varchar](250) NULL,
 CONSTRAINT [PK_StudentInfo] PRIMARY KEY(StudentId));
 
 //Creating StudentMarks Table
 
 CREATE TABLE StuMarks (
    StudentId int NOT NULL,
    Subject varchar(20) NOT NULL,
    Mark int NOT NULL,
    ExamType varchar(20) NOT NULL,
	
    FOREIGN KEY (StudentID) REFERENCES Studentinfo(StudentID)
);

//Delete Table example

drop table StuMarks;

//Add New Column To Existing Table example

alter table marks add AvgMarks decimal(4,2);

//Altering Particular Column example

alter table marks alter column AvgMarks numeric(4,2) Not Null;

//Creating Stored Procedure With parameter for particular student 

CREATE PROCEDURE StudentMarks @StudentId int, @ExamType nvarchar(10)
AS
SELECT Studentinfo.Name,StuMarks.ExamType,sum(StuMarks.Mark) as Total,avg(StuMarks.Mark) as Percentage, Studentinfo.Name,sum(StuMarks.Mark)/2 as Total,avg(StuMarks.Mark) as Percentage ,dbo.studentgrade(sum(StuMarks.Mark)/2,sum(case when StuMarks.Mark>40 then 1 else 0 end)) as Grade FROM StuMarks INNER JOIN  Studentinfo  on  Studentinfo.StudentId = StuMarks.StudentId WHERE Studentinfo.StudentId=@StudentId AND StuMarks.examtype = @ExamType group by Studentinfo.Name ,StuMarks.ExamType
GO

//Creating Stored Procedure to get total marks avg and grade of all student 

create procedure StudentToalMarks 
as
SELECT Studentinfo.Name,sum(StuMarks.Mark)/2 as Total,avg(StuMarks.Mark) as Percentage ,dbo.studentgrade(sum(StuMarks.Mark)/2,sum(case when StuMarks.Mark>40 then 1 else 0 end)) as Grade FROM StuMarks INNER JOIN  Studentinfo  on  Studentinfo.StudentId = StuMarks.StudentId group by Studentinfo.Name 
go

//Add Check Constraint for marks not greater than 100

ALTER TABLE marks add CONSTRAINT CHK_Marks CHECK (Mark<=100);

//insert into table studentInfo and StuMarks

insert into studentinfo values('Arun',12,'Chennai');
insert into StuMarks values(5,'Tamil',75,'quarterly');
insert into StuMarks values(5,'English',95,'quarterly');
insert into StuMarks values(5,'Maths',28,'quarterly');
insert into StuMarks values(5,'Science',70,'quarterly');
insert into StuMarks values(5,'Social Science',82,'quarterly');

//Update Query

update stumarks set mark=56 where studentid=5 and SubjectName='Tamil' and examtype='quarterly'

//Function to return Grade

CREATE function [dbo].[StudentGrade] (@Mark int,@Status int)
Returns Char(1) as
begin
declare @return_Value char(1);
if (@Status<10) set @return_Value='F';
else if (@Mark>450 and @Status=10) set @return_Value='A';
else if (@Mark>400) set @return_Value='B';
else if (@Mark>350) set @return_Value='C';
else if (@Mark>300) set @return_Value='D';
else if (@Mark>200) set @return_Value='E';
return @return_value
end;

//execute storeprocedure

exec studentmarks @StudentId= 1,@ExamType='quarterly'

exec StudentToalMarks

//Create new table

CREATE TABLE [dbo].[StudentMarks1](
	[StudentId] [int] NOT NULL,
	[Tamil] [int] NOT NULL,
	[English] [int] NOT NULL,
	[Maths] [int] NOT NULL,
	[science] [int] NOT NULL,
	[Social] [int] NOT NULL,
	[ExamType] [varchar](10) NOT NULL,
	[Total] [int] NULL,
	[Average] [int] NULL
	FOREIGN KEY (StudentID) REFERENCES Studentinfo(StudentID)
) ;


//Trigger example ,trigger get fire when insert new records into table automatically calculate total and average

create TRIGGER tr_StuMarks ON StudentMarks1
    after INSERT
	
    AS
    BEGIN
	  update StudentMarks1
      SET StudentMarks1.Total = StudentMarks1.tamil + StudentMarks1.english + StudentMarks1.maths + StudentMarks1.science + StudentMarks1.Social,StudentMarks1.Average=StudentMarks1.tamil + StudentMarks1.english + StudentMarks1.maths + StudentMarks1.science + StudentMarks1.Social/5;

      
    END
   GO

//Table Valued Function

Create function [dbo].[StudentAnnualMarks] (@StudentId int)
Returns TABLE as
return
select Studentinfo.Name,StuMarks.SubjectName,sum(StuMarks.Mark)/2 as AnualMark FROM StuMarks INNER JOIN  Studentinfo   on  Studentinfo.StudentId = StuMarks.StudentId where StuMarks.StudentId=@StudentId group by Studentinfo.Name,StuMarks.SubjectName;

//call Function input studentid

SELECT * FROM studentannualmarks(4);

Name    Subject       AnnualMarks
---------------------------------
Ramu	English	             85
Ramu	Maths	             71
Ramu	Science	             69
Ramu	Social Science	     85
Ramu	Tamil	             71

//function to calculate anual marks

Create function [dbo].[StudentAnnualMarks1] (@StudentId int)
Returns TABLE as
RETURN 
(
	-- Add the SELECT statement with parameter references here
	select Studentinfo.Name,sum(case when StuMarks.SubjectName='Tamil' then StuMarks.Mark else 0 end)/2 as Tamil,sum(case when StuMarks.SubjectName='English' then StuMarks.Mark else 0 end)/2 as English,sum(case when StuMarks.SubjectName='Maths' then StuMarks.Mark else 0 end)/2 as Maths,sum(case when StuMarks.SubjectName='Science' then StuMarks.Mark else 0 end)/2 as Science,sum(case when StuMarks.SubjectName='Social Science' then StuMarks.Mark else 0 end)/2 as Social FROM StuMarks INNER JOIN  Studentinfo   on  Studentinfo.StudentId = StuMarks.StudentId where StuMarks.StudentId=@studentid group by Studentinfo.Name
)
GO

//Annual Mark of the student

SELECT * FROM StudentAnnualMarks1(4);
Name    Tamil  English Maths  Science  Social
---------------------------------------------
Ramu	71	85	71	69	85
